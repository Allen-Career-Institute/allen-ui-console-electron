name: Build Windows Portable Packages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_system:
        description: 'Build system to use'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - forge
        - builder

jobs:
  build-portable:
    runs-on: windows-latest
    
    outputs:
      forge_size: ${{ steps.size_analysis.outputs.forge_size }}
      builder_size: ${{ steps.size_analysis.outputs.builder_size }}
      size_difference: ${{ steps.size_analysis.outputs.size_difference }}
      percentage_difference: ${{ steps.size_analysis.outputs.percentage_difference }}
      winner: ${{ steps.size_analysis.outputs.winner }}
      recommendation: ${{ steps.size_analysis.outputs.recommendation }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Build TypeScript
      run: yarn build:ts
      
    - name: Build renderer
      run: yarn renderer:build
      
    - name: Build Electron-Forge Portable
      if: github.event.inputs.build_system == 'both' || github.event.inputs.build_system == 'forge'
      run: yarn build:win-forge
      continue-on-error: true
        
    - name: Build Electron-Builder Portable
      if: github.event.inputs.build_system == 'both' || github.event.inputs.build_system == 'builder'
      run: yarn build:win-builder
      continue-on-error: true
        
    - name: Run Size Analysis
      id: size_analysis
      run: |
        echo "Running size analysis..."
        chmod +x scripts/analyze-size.sh
        ./scripts/analyze-size.sh
        
    - name: List build artifacts
      run: |
        echo "=== BUILD ARTIFACTS SUMMARY ==="
        echo ""
        
        echo "Electron-Forge (out directory):"
        if (Test-Path "out") {
          $forgeFiles = Get-ChildItem out -Recurse | Where-Object { $_.Name -like "*.zip" }
          if ($forgeFiles) {
            foreach ($file in $forgeFiles) {
              $size = [math]::Round($file.Length / 1MB, 2)
              Write-Host "  ✅ $($file.Name): $size MB"
            }
          } else {
            Write-Host "  ⚠️  No .zip files found"
          }
        } else {
          Write-Host "  ❌ No out directory found"
        }
        
        echo ""
        echo "Electron-Builder (dist-electron-builder directory):"
        if (Test-Path "dist-electron-builder") {
          $builderFiles = Get-ChildItem dist-electron-builder -Recurse | Where-Object { $_.Name -like "*.exe" }
          if ($builderFiles) {
            foreach ($file in $builderFiles) {
              $size = [math]::Round($file.Length / 1MB, 2)
              Write-Host "  ✅ $($file.Name): $size MB"
            }
          } else {
            Write-Host "  ⚠️  No .exe files found"
          }
        } else {
          Write-Host "  ❌ No dist-electron-builder directory found"
        }
        
    - name: Upload Electron-Forge Portable
      if: github.event.inputs.build_system == 'both' || github.event.inputs.build_system == 'forge'
      uses: actions/upload-artifact@v4
      with:
        name: electron-forge-portable
        path: out/**/*.zip
        retention-days: 30
        
    - name: Upload Electron-Builder Portable
      if: github.event.inputs.build_system == 'both' || github.event.inputs.build_system == 'builder'
      uses: actions/upload-artifact@v4
      with:
        name: electron-builder-portable
        path: dist-electron-builder/*.exe
        retention-days: 30
        
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          out/**/*.zip
          dist-electron-builder/*.exe
        tag_name: v${{ github.run_number }}-portable
        name: Windows Portable Release v${{ github.run_number }}
        body: |
          Windows portable packages built from commit ${{ github.sha }}
          
          ## What's included:
          - Electron-Forge portable (.zip)
          - Electron-Builder portable (.exe)
          
          ## Build Info:
          - Node.js: 18
          - Platform: Windows x64
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          
          ## Download
          Download the appropriate portable package:
          - **Electron-Forge**: Use the .zip file (extract and run)
          - **Electron-Builder**: Use the .exe file (run directly)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  comparison-report:
    needs: build-portable
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate Comparison Report
      run: |
        echo "## 📊 Portable Build Comparison Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Electron-Forge Size**: ${{ needs.build-portable.outputs.forge_size }} MB" >> $GITHUB_STEP_SUMMARY
        echo "- **Electron-Builder Size**: ${{ needs.build-portable.outputs.builder_size }} MB" >> $GITHUB_STEP_SUMMARY
        echo "- **Size Difference**: ${{ needs.build-portable.outputs.size_difference }} MB" >> $GITHUB_STEP_SUMMARY
        echo "- **Percentage Difference**: ${{ needs.build-portable.outputs.percentage_difference }}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Winner" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🏆 **${{ needs.build-portable.outputs.winner }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.build-portable.outputs.recommendation }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download the build artifacts from the Actions tab to test the portable packages." >> $GITHUB_STEP_SUMMARY
