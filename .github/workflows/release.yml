name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0) - leave empty for auto-increment'
        required: false
        type: string
      version_type:
        description: 'Version increment type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  YARN_VERSION: '4.9.2'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            platform: win32
            arch: x64
          - os: windows-latest
            platform: win32
            arch: ia32

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build TypeScript
        run: yarn build:ts

      - name: Build renderer
        run: yarn renderer:build

      - name: Setup certificates
        run: |
          # Create certificates directory
          mkdir -p certificates
          
          # Decode and create Windows certificate
          if [ "${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}" != "" ]; then
            echo "${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}" | base64 -d > certificates/windows_certificate.pfx
            echo "Windows certificate created"
          fi
          
          # Set certificate environment variables
          if [ -f "certificates/windows_certificate.pfx" ]; then
            echo "CSC_LINK=certificates/windows_certificate.pfx" >> $GITHUB_ENV
          fi

      - name: Build Electron app
        run: yarn make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          STAGE_URL: ${{ secrets.STAGE_URL }}
          PROD_URL: ${{ secrets.PROD_URL }}
          CUSTOM_URL: ${{ secrets.CUSTOM_URL }}
          CSC_LINK: ${{ env.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: allen-ui-console-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            out/
            !out/**/*.blockmap
          retention-days: 90

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get version
        id: get_version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            # Use manually specified version
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Using manually specified version: $NEW_VERSION"
          else
            # Auto-increment version
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            if [ "$VERSION_TYPE" = "" ]; then
              VERSION_TYPE="patch"
            fi
            
            # Split version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            case $VERSION_TYPE in
              "major")
                NEW_MAJOR=$((MAJOR + 1))
                NEW_VERSION="$NEW_MAJOR.0.0"
                ;;
              "minor")
                NEW_MINOR=$((MINOR + 1))
                NEW_VERSION="$MAJOR.$NEW_MINOR.0"
                ;;
              "patch")
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
              *)
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
            esac
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Auto-incrementing version: $CURRENT_VERSION -> $NEW_VERSION ($VERSION_TYPE)"
          fi

      - name: Update package.json version
        run: |
          # Update version in package.json
          npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.get_version.outputs.version }}"

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Bump version to ${{ steps.get_version.outputs.version }} [skip ci]"
          git push

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Allen UI Console Electron v${{ steps.get_version.outputs.version }}
            
            ### Downloads
            - **Windows (64-bit):** allen-ui-console-win32-x64.zip
            - **Windows (32-bit):** allen-ui-console-win32-ia32.zip
            
            ### Changes
            See the [commit history](https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...main) for details.
          files: |
            artifacts/allen-ui-console-win32-x64/out/*
            artifacts/allen-ui-console-win32-ia32/out/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
