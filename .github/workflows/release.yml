name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0) - leave empty for auto-increment'
        required: false
        type: string
      version_type:
        description: 'Version increment type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  YARN_VERSION: '4.9.2'
  NODE_ENV: production
  STAGE_URL: ${{ secrets.STAGE_CONSOLE_URL }}
  PROD_URL: ${{ secrets.PROD_CONSOLE_URL }}
  CUSTOM_URL: ${{ secrets.CUSTOM_CONSOLE_URL }}
  ASTRA_ELECTRON_SENTRY_DSN: ${{ secrets.ASTRA_ELECTRON_SENTRY_DSN }}
  ASTRA_ELECTRON_SENTRY_ENDPOINT: ${{ secrets.ASTRA_ELECTRON_SENTRY_ENDPOINT }}
          

# Cancel in-progress jobs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check permissions first
  check-permissions:
    runs-on: ubuntu-latest
    outputs:
      has-permissions: ${{ steps.perms.outputs.level }}
    steps:
      - name: Check repository permissions
        id: perms
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permissions } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            core.setOutput('level', permissions.permission);
            console.log(`User ${context.actor} has ${permissions.permission} permission`);

  build:
    runs-on: windows-latest
    timeout-minutes: 45
    # Only run if not a fork and user has write access
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && 
       !github.event.repository.fork && 
       contains(fromJson('["write", "admin", "maintain"]'), needs.check-permissions.outputs.has-permissions))
    needs: check-permissions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install --immutable
        timeout-minutes: 10

      - name: Test environment variables
        run: yarn test:env
        timeout-minutes: 2
        env:
          NODE_ENV: ${{ env.NODE_ENV }}
          STAGE_URL: ${{ env.STAGE_URL }}
          PROD_URL: ${{ env.PROD_URL }}
          CUSTOM_URL: ${{ env.CUSTOM_URL }}
          DEV_URL: ${{ env.DEV_URL }}
          ASTRA_ELECTRON_SENTRY_DSN: ${{ env.ASTRA_ELECTRON_SENTRY_DSN }}
          ASTRA_ELECTRON_SENTRY_ENDPOINT: ${{ env.ASTRA_ELECTRON_SENTRY_ENDPOINT }}
    
      - name: Build Windows AppX
        run: yarn build:win-appx
        timeout-minutes: 20
    
      - name: Package MSIX
        run: yarn package:msix
        timeout-minutes: 10
    
      - name: Cleanup build artifacts
        run: Remove-Item -Recurse -Force "dist-electron-builder\win-unpacked" -ErrorAction SilentlyContinue
        timeout-minutes: 5

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        timeout-minutes: 5
        with:
          name: astra-electron-win32-x64
          path: |
            dist-electron-builder/
            !dist-electron-builder/**/*.blockmap
            !dist-electron-builder/msix_layout/
          retention-days: 90

  version-manager:
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.ref == 'refs/heads/main' && 
      !github.event.repository.fork && 
      contains(fromJson('["write", "admin", "maintain"]'), needs.check-permissions.outputs.has-permissions)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: check-permissions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable
        timeout-minutes: 10

      - name: Get version
        id: get_version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          if [ "${{ github.event.inputs.version }}" != "" ]; then
            # Use manually specified version
            NEW_VERSION="${{ github.event.inputs.version }}"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Using manually specified version: $NEW_VERSION"
          else
            # Auto-increment version
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            if [ "$VERSION_TYPE" = "" ]; then
              VERSION_TYPE="patch"
            fi
            
            # Split version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            case $VERSION_TYPE in
              "major")
                NEW_MAJOR=$((MAJOR + 1))
                NEW_VERSION="$NEW_MAJOR.0.0"
                ;;
              "minor")
                NEW_MINOR=$((MINOR + 1))
                NEW_VERSION="$MAJOR.$NEW_MINOR.0"
                ;;
              "patch")
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
              *)
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                ;;
            esac
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Auto-incrementing version: $CURRENT_VERSION -> $NEW_VERSION ($VERSION_TYPE)"
          fi

      - name: Update package.json version
        run: |
          # Update version in package.json
          npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.get_version.outputs.version }}"

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Bump version to ${{ steps.get_version.outputs.version }} [skip ci]"
          git push

  release:
    needs: [build, version-manager]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      (startsWith(github.ref, 'refs/tags/') || 
       (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')) &&
      !github.event.repository.fork &&
      contains(fromJson('["write", "admin", "maintain"]'), needs.check-permissions.outputs.has-permissions)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.version-manager.outputs.version) }}
          name: Release ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.version-manager.outputs.version) }}
          body: |
            ## Allen UI Console Electron ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.version-manager.outputs.version) }}

            ### Downloads
            - **Windows (64-bit):** AppX Package (.appx) - Ready for Windows Store submission
            - **Windows (64-bit):** MSIX Package (.msix) - Modern Windows packaging format

            ### Build Info
            - **Build Tool:** Electron Builder + electron-windows-msix
            - **Node.js:** 18
            - **Platforms:** Windows 64-bit (APPX + MSIX)
            - **Commit:** ${{ github.sha }}

            ### Windows Store
            The AppX package is ready for submission to the Windows Store. Use the AppX file for:
            - Windows Store publishing
            - Enterprise distribution
            - Testing on Windows 10/11 devices

            ### MSIX Package
            The MSIX package provides modern Windows packaging with:
            - Better security and isolation
            - Automatic updates
            - Enterprise deployment support
            - Windows 10/11 compatibility

            ### Changes
            See the [commit history](https://github.com/${{ github.repository }}/compare/${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.version-manager.outputs.version) }}...main) for details.
          files: |
            artifacts/astra-win32-x64/dist-electron-builder/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
